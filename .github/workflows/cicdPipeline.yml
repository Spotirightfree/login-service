# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: CI/CD Pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  Build_Test:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore login-service/
    - name: Build project
      run: dotnet build login-service/ --no-restore
    - name: Test
      run: dotnet test login-service.test/ --verbosity normal --logger "trx;LogFileName=test-results.trx" || true
    - name: Test Report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: DotNET Tests
        path: "**/test-results.trx"                            
        reporter: dotnet-trx
        fail-on-error: true
        
  SonarcloudCodeAnalysis:
    name: Build and analyze
    runs-on: windows-latest
    needs: Build_Test
    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'zulu' # Alternative distribution options are available.
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"Spotirightfree_login-service" /o:"spotirightfree" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build ./login-service/ --no-incremental
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
          
  buildJMeter:
    runs-on: windows-latest
    needs: SonarcloudCodeAnalysis
    steps:
      - uses: actions/checkout@v2

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'
          include-prerelease: true

      - name: Build with dotnet
        run: dotnet build ./login-service --configuration Release

      - name: dotnet publish
        run: dotnet publish ./login-service -c Release -o ${{env.DOTNET_ROOT}}/myapp

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v2
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp

  deployJMeter:
    runs-on: windows-latest
    needs: buildJMeter
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v2
        with:
          name: .net-app

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'login-service-spotirightfree'
          slot-name: 'Production'
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_506B672F984649B39AD851E2908CF1AF }}
          package: .
          
  JMeterTest:
    runs-on: ubuntu-latest
    needs: deployJMeter
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: JMeter Test
        uses: QAInsights/PerfAction@v3.1
        with:
          test-plan-path: ./TestPlans/login-testplan/test_plan_login-service.jmx
          args: ""
          
      - name: Upload Results
        uses: actions/upload-artifact@v2
        with:
          name: jmeter-results
          path: result.jtl
          
  docker_build:
    runs-on: ubuntu-latest
    needs: deployJMeter
    steps:
    - uses: actions/checkout@v3
    - name: Build the Docker image
      run: docker build ./login-service --file ./login-service/Dockerfile --tag login-service:$(date +%s)
      
  push_to_registry:
      name: Push Docker image to Docker Hub
      runs-on: ubuntu-latest
      needs: docker_build
      steps:
        - name: Check out the repo
          uses: actions/checkout@v3

        - name: Login to Dockerhub
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

        - name: Build and push
          uses: docker/build-push-action@v4
          with:
            context: ./login-service
            file: ./login-service/Dockerfile
            push: true
            tags: ${{ secrets.DOCKERHUB_USERNAME }}/login-service:latest
